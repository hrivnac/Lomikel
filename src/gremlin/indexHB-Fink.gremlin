// Create HBase Index - Fink
// (uses direct indexing, big data can use also MR indexing) 
// =========================================================

graph.tx().rollback()

mgmt = graph.openManagement()

// Properties
jd         = mgmt.getPropertyKey('jd' )
ra         = mgmt.getPropertyKey('ra' )
dec        = mgmt.getPropertyKey('dec')
classifier = mgmt.getPropertyKey('classifier')
cls        = mgmt.getPropertyKey('cls')

//  Indexes                                                            
mgmt.buildIndex('byJd',    Vertex.class).addKey(jd)                    .buildCompositeIndex()
mgmt.buildIndex('byRaDec', Vertex.class).addKey(ra).addKey(dec)        .buildCompositeIndex()
mgmt.buildIndex('byCls',   Vertex.class).addKey(classifier).addKey(cls).buildCompositeIndex()
                                                                      
mgmt.commit()

// Wait for index
ManagementSystem.awaitGraphIndexStatus(graph, 'byJd'   ).status(SchemaStatus.REGISTERED).call()
ManagementSystem.awaitGraphIndexStatus(graph, 'byRaDec').status(SchemaStatus.REGISTERED).call()
ManagementSystem.awaitGraphIndexStatus(graph, 'byCls'  ).status(SchemaStatus.REGISTERED).call()

// Reindex existing data
mgmt = graph.openManagement()
mgmt.updateIndex(mgmt.getGraphIndex('byJd'   ), SchemaAction.REINDEX).get()
mgmt.updateIndex(mgmt.getGraphIndex('byRaDec'), SchemaAction.REINDEX).get()
mgmt.updateIndex(mgmt.getGraphIndex('byCls'  ), SchemaAction.REINDEX).get()
mgmt.getGraphIndexes(Vertex.class)
mgmt.getGraphIndexes(Edge.class)
mgmt.printIndexes()
mgmt.commit()

// Enable index
ManagementSystem.awaitGraphIndexStatus(graph, 'byJd'   ).status(SchemaStatus.ENABLED).call()
ManagementSystem.awaitGraphIndexStatus(graph, 'byRaDec').status(SchemaStatus.ENABLED).call()
ManagementSystem.awaitGraphIndexStatus(graph, 'byCls'  ).status(SchemaStatus.ENABLED).call()
