// create personal graph in memory
// (Lomikel is a groovy class for accesss and manipulation of graphs)
graph1 = Lomikel.myGraph()
// create (or access) named graph "test" in the master HBase
// it is also possible to create graph in another HBase
//graph1 = Lomikel.myGraph('test')
// get access to this graph
g1 = graph1.traversal()
// create an instance of GremlinRecipies - a class with usefull methods for operations on graphs
gr = new GremlinRecipies(g)
// get any Vertex (1000 * source)
// clone that vertex from the master graph (g) to personal graph (g1)
// last two (integer) arguments specify how far up/down should cloning go
// cloning doesn't clone loops, up goes all the way up (without going down), down goes just down 
// -1 means clone everything (it may be dangerous)
g.V().has('lbl', 'source').limit(1000).each {source ->
  gr.gimme(source, g1, -1, -1)
  }
// commit new structure
graph1.tx().commit()
// scan all candidates
// compute difference bewtween 'rb' (that can be any formula using Vertex properties, giving double)
// if the result >= 0.01 then add an Edge with name 'distance' and a property 'difference' with the result value
// (commit after each Integer.MAX_VALUE new Edges, so do not commit)
// note: g1 does not have schema and indexes - so used variables should be specified 
gr.structurise(g1.V().has('lbl', 'candidate'), 'rb[0]-rb[1]', 'rb', 0.01, 'distance', 'difference', Integer.MAX_VALUE)
// check. get some statistics about new Edges
g1.E().has('lbl', 'distance').values('difference').union(min(), max(), sum(), mean(), count())
