// create personal graph in memory
// (Lomikel is a groovy class for accesss and manipulation of graphs)
graph1 = Lomikel.myGraph()
// create (or access) named graph "test" in the master HBase
// it is also possible to create graph in another HBase
//graph1 = Lomikel.myGraph('test')
// get access to this graph
g1 = graph1.traversal()
// create an instance of GremlinRecipies - a class with usefull methods for operations on graphs
gr = new GremlinRecipies(g)
// get any Vertex
alert = g.V().has('lbl', 'source').has('objectId', 'ZTF18abimyys').out().limit(1).next()
// clone that vertex from the master graph (g) to personal graph (g1)
// last two (integer) arguments specify how far up/down should cloning go
// cloning doesn't clone loops, up goes all the way up (without going down), down goes just down 
// -1 means clone everything (it may be dangerous)
x = gr.gimme(alert, g1, -1, -1)
// commit new structure
graph1.tx().commit()

// scan first 10 candidates
// compute difference bewtween 'rb' (that can be any formula using Vertex properties, giving double)
// if the result >= 0 then add an Edge with name 'rrbb' and a property 'difference' with the result value
// (commit after each 1000000 new Edges, so do not commit)
gr.structurise(g.V().has('lbl', 'candidate').limit(10), "rb[0]-rb[1]", 0, "rrbb", "difference", 1000000)
// check
g.E().has('difference').valueMap()
