import com.Lomikel.Januser.GremlinRecipies;
import com.Lomikel.HBaser.HBaseClient
import com.Lomikel.HBaser.FinkHBaseClient
import groovy.sql.Sql
  
// -----------------------------------------------------------------------------

class Lomikel {

  def static init(c) {
    config = c
    println "class Lomikel initialised"
    }

  def static hi() {
    return "Hello World from Lomikel console !"
    }
    
  def static myGraph(myName) {
    def graph0
    def g0
    if (myName == null) {
      graph0 = JanusGraphFactory.build().
                                 set('storage.backend', 'inmemory').
                                 open()
      }
    else {
      graph0 = JanusGraphFactory.build().
                                 set('storage.backend',     config.getString('storage.backend')).
                                 set('storage.hostname',    config.getString('storage.hostname')).
                                 set('storage.port',        config.getString('storage.port')).
                                 set('storage.hbase.table', myName).
                                 open()
      }
    return graph0
    }
      
  def static get_or_create(g, lbl, name, value) {
    return g.V().has('lbl', lbl).
                 has(name, value).
                 fold().
                 coalesce(unfold(), addV(lbl).
                                    property('lbl', lbl).
                                    property(name, value));
    }
    
  def static get_or_create_edge(g, lbl1, name1, value1, lbl2, name2, value2, edge) {
    return g.V().has('lbl', lbl1).
                 has(name1, value1).
                 as('v').
             V().has('lbl', lbl2).
                 has(name2, value2).
             coalesce(__.inE(edge).where(outV().as('v')), addE(edge).from('v'));
      }
      
  // w = g.addV().property('lbl', 'datalink').property('technology', 'Phoenix').property('url', 'jdbc:phoenix:ithdp2101.cern.ch:2181'      ).property('query', "select * from AEI.CANONICAL_0 where project = 'mc16_13TeV'").next()
  // w = g.addV().property('lbl', 'datalink').property('technology', 'Graph'  ).property('url', 'hbase:188.184.87.217:8182:janusgraph'     ).property('query', "g.V().limit(1)").next()
  // w = g.addV().property('lbl', 'datalink').property('technology', 'HBase'  ).property('url', '134.158.74.54:2183:ztf:schema'            ).property('query', "client.setLimit(10); return client.scan(null, null, null, 0, false, false)").next()
  def static getDataLink(v, q = null) {
    def url   = v.values('url'  ).next()
    def query
    if (q != null) {
      query = q
      }
    else if (v.values('query').hasNext()) {
      query = v.values('query').next()
      }
    else {
      return 'no Query'
      }
    try {
      switch (v.values('technology').next()) {
        case 'HBase':
          def (hostname, port, table, schema) = url.split(':') // 134.158.74.54:2181:ztf:schema_0.7.0_0.3.8
          def client = new HBaseClient(hostname, port)
          client.connect(table, schema)
          return Eval.me('client', client, query)
          break
        case 'Graph':
          def (backend, hostname, port, table) = url.split(':') // hbase:188.184.87.217:8182:janusgraph
          def graph = JanusGraphFactory.build().
                                        set('storage.backend',     backend ).
                                        set('storage.hostname',    hostname).
                                        set('storage.port',        port    ).
                                        set('storage.hbase.table', table   ).
                                        open()
          def g = graph.traversal()
          return Eval.me('g', g, query)
          break
        case 'Phoenix':
          return Sql.newInstance(url, 'org.apache.phoenix.jdbc.PhoenixDriver').
                        rows(query)
          break
        default:
          return 'DataLink ' + v + ' unknown'
          }
        }
      catch (Exception e) {
        return 'DataLink ' + v + ' not found'
        }
      }

  def static standardDeviation(g, lbl, variableNames) {
    def sdMap = [:]
    variableNames.split().stream().each {v ->
      g.V().has('lbl', lbl).values(v).fold().as(v).mean(local).as('mean').select(v).unfold().math('(_-mean)^2').mean().math('sqrt(_)').map{sd -> println  v + ': ' + sd
                                                                                                                        sdMap += [(v):sd]}.next()
      }
    return sdMap
    }
      
  def static dropV(graph, label, n) {
    def g = graph.traversal()
    def m = g.V().has('lbl', label).count().next()
    while (m > 0) {
      println('' + m + ' ' + label + 's to drop')
      g.V().has('lbl', label).limit(n).drop().iterate()
      graph.traversal().tx().commit()
      m -= n
      }
    }
    
   def static dropE(graph, label, n) {
    def g = graph.traversal()
    def m = g.E().has('lbl', label).count().next()
    while (m > 0) {
      println('' + m + ' ' + label + 's to drop')
      g.E().has('lbl', label).limit(n).drop().iterate()
      graph.traversal().tx().commit()
      m -= n
      }
    }
 
  def static config    
       
  }
  
// -----------------------------------------------------------------------------
  
prop = args[0]
home = args[1]

graph = JanusGraphFactory.open(prop)
g = graph.traversal()
c = graph.configuration()

Lomikel.init(c)
