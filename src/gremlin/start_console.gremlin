import groovy.sql.Sql
//:record start MyGremlin.log

class Lomikel {

  def static init() {
    println "Lomikel initialised"
    }

  def static hi() {
    return "Hello World from Lomikel console !"
    }
  
  def static get_or_create(g, lbl, name, value) {
    return g.V().has('lbl', lbl).
                 has(name, value).
                 fold().
                 coalesce(unfold(), addV(lbl).
                                    property('lbl', lbl).
                                    property(name, value));
    }
    
  def static get_or_create_edge(g, lbl1, name1, value1, lbl2, name2, value2, edge) {
    return g.V().has('lbl', lbl1).
                 has(name1, value1).
                 as('v').
             V().has('lbl', lbl2).
                 has(name2, value2).
             coalesce(__.inE(edge).where(outV().as('v')), addE(edge).from('v'));
      }
  
      
  def static getDataLink(v) {
    switch (v.values('technology').next()) {
      case 'HBase':
        return 'HBase'
        break
      case 'Graph':
        return 'Graph'
        break
      case 'Phoenix':
        return Sql.newInstance(v.values('url').next(), 'org.apache.phoenix.jdbc.PhoenixDriver')
                  .rows(v.values('query').next())
        break
      default:
        return 'unknown DataLink ' + v
        }
      }
  
  }
  
// -----------------------------------------------------------------------------
  
prop = args[0]
home = args[1]

graph = JanusGraphFactory.open(prop)
g = graph.traversal()
c = graph.configuration()

Lomikel.init()
