// Specification of schema (constrains) - Fink
// ===========================================

mgmt = graph.openManagement()

// Vertexes
datalink          = mgmt.getVertexLabel('datalink')
OCol              = mgmt.makeVertexLabel('OCol'   ).make()
source            = mgmt.makeVertexLabel('source' ).make()
object            = mgmt.makeVertexLabel('object' ).make()

// Edges
props        = mgmt.getEdgeLabel('props'       )
has          = mgmt.getEdgeLabel('has'         )
holds        = mgmt.getEdgeLabel('holds'       )
sends        = mgmt.getEdgeLabel('sends'       )
contains     = mgmt.getEdgeLabel('contains'    )
deepcontains = mgmt.getEdgeLabel('deepcontains')
collects     = mgmt.getEdgeLabel('collects'    )
overlaps     = mgmt.getEdgeLabel('overlaps'    )

// Properties
title        = mgmt.getPropertyKey('title'        )
lbl          = mgmt.getPropertyKey('lbl'          )
name         = mgmt.getPropertyKey('name'         )
hbase        = mgmt.getPropertyKey('hbase'        )
phoenix      = mgmt.getPropertyKey('phoenix'      )
url          = mgmt.getPropertyKey('url'          )
query        = mgmt.getPropertyKey('query'        )
technology   = mgmt.getPropertyKey('technology'   )
timestamp    = mgmt.getPropertyKey('timestamp'    )
importDate   = mgmt.getPropertyKey('importDate'   )
importSource = mgmt.getPropertyKey('importSource' )
objectId     = mgmt.makePropertyKey('objectId'    ).dataType(String.class).cardinality(Cardinality.SINGLE).make()
jd           = mgmt.makePropertyKey('jd'          ).dataType(Double.class).cardinality(Cardinality.SINGLE).make() 
classifier   = mgmt.makePropertyKey('classifier'  ).dataType(String.class).cardinality(Cardinality.SINGLE).make()
flavor       = mgmt.makePropertyKey('flavor'      ).dataType(String.class).cardinality(Cardinality.SINGLE).make()
system       = mgmt.makePropertyKey('system'      ).dataType(String.class).cardinality(Cardinality.SINGLE).make()
cls          = mgmt.makePropertyKey('cls'         ).dataType(String.class).cardinality(Cardinality.SINGLE).make()
intersection = mgmt.makePropertyKey('intersection').dataType(Double.class).cardinality(Cardinality.SINGLE).make()
sizeIn       = mgmt.makePropertyKey('sizeIn'      ).dataType(Double.class).cardinality(Cardinality.SINGLE).make()
sizeOut      = mgmt.makePropertyKey('sizeOut'     ).dataType(Double.class).cardinality(Cardinality.SINGLE).make()

// Vertex properties
mgmt.addProperties(OCol,
                   lbl,
                   system,
                   classifier,
                   flavor,
                   cls)   
mgmt.addProperties(source,
                   lbl,
                   objectId,
                   jd,
                   importDate)
mgmt.addProperties(object,
                   lbl,
                   system,
                   objectId,
                   importDate)
                                    
// Edge properties
mgmt.addProperties(overlaps,
                   lbl,
                   intersection,
                   sizeIn,
                   sizeOut)

// Connections   
mgmt.addConnection(sends,        object, source)
mgmt.addConnection(deepcontains, OCol,   object)
mgmt.addConnection(overlaps,     OCol,   OCol)

// Info
mgmt.printSchema()

mgmt.commit()
