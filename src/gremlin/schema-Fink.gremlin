// Specification of schema (constrains) - Fink
// ===========================================

mgmt = graph.openManagement()

// Vertexes
datalink          = mgmt.getVertexLabel('datalink')
AlertsOfInterest  = mgmt.makeVertexLabel('AlertsOfInterest' ).make()
SourcesOfInterest = mgmt.makeVertexLabel('SourcesOfInterest').make()
AlertsCollection  = mgmt.makeVertexLabel('AlertsCollection' ).make()
source            = mgmt.makeVertexLabel('source'           ).make()
alert             = mgmt.makeVertexLabel('alert'            ).make()

// Edges
props        = mgmt.getEdgeLabel('props'       )
has          = mgmt.getEdgeLabel('has'         )
holds        = mgmt.getEdgeLabel('holds'       )
contains     = mgmt.getEdgeLabel('contains'    )
deepcontains = mgmt.getEdgeLabel('deepcontains')
overlaps = mgmt.makeEdgeLabel('overlaps').multiplicity(SIMPLE  ).make()

// Properties
title        = mgmt.getPropertyKey('title'        )
lbl          = mgmt.getPropertyKey('lbl'          )
name         = mgmt.getPropertyKey('name'         )
hbase        = mgmt.getPropertyKey('hbase'        )
phoenix      = mgmt.getPropertyKey('phoenix'      )
url          = mgmt.getPropertyKey('url'          )
query        = mgmt.getPropertyKey('query'        )
technology   = mgmt.getPropertyKey('technology'   )
timestamp    = mgmt.getPropertyKey('timestamp'    )
importDate   = mgmt.getPropertyKey('importDate'   )
importSource = mgmt.getPropertyKey('importSource' )
objectId     = mgmt.makePropertyKey('objectId'    ).dataType(String.clas).cardinality(Cardinality.SINGLE).make()
jd           = mgmt.makePropertyKey('jd'          ).dataType(Double.clas).cardinality(Cardinality.SINGLE).make() 
alertType    = mgmt.makePropertyKey('alertType'   ).dataType(String.clas).cardinality(Cardinality.SINGLE).make()
sourceType   = mgmt.makePropertyKey('sourceType'  ).dataType(String.clas).cardinality(Cardinality.SINGLE).make()
intersection = mgmt.makePropertyKey('intersection').dataType(Double.clas).cardinality(Cardinality.SINGLE).make()
sizeIn       = mgmt.makePropertyKey('sizeIn'      ).dataType(Double.clas).cardinality(Cardinality.SINGLE).make()
sizeOut      = mgmt.makePropertyKey('sizeOut'     ).dataType(Double.clas).cardinality(Cardinality.SINGLE).make()

// Vertex properties
mgmt.addProperties(AlertsOfInterest,
                   lbl,
                   alertType,
                   technology,
                   url)   
mgmt.addProperties(SourcesOfInterest,
                   lbl,
                   sourceType,
                   technology,
                   url)   
mgmt.addProperties(AlertsCollection,
                   lbl,
                   title)   
mgmt.addProperties(alert,
                   lbl,
                   objectId,
                   jd)
mgmt.addProperties(source,
                   lbl,
                   objectId)
                                    
// Edge properties
mgmt.addProperties(overlaps,
                   lbl,
                   intersection,
                   sizeIn,
                   sizeOut)

// Connections   
mgmt.addConnection(has,          source,            alert)
mgmt.addConnection(holds,        AlertsOfInterest,  alert)
mgmt.addConnection(deepcontains, SourcesOfInterest, source)
mgmt.addConnection(overlaps,     SourcesOfInterest, SourcesOfInterest)
mgmt.addConnection(overlaps,     AlertsOfInterest,  SourcesOfInterest)
mgmt.addConnection(overlaps,     AlertsOfInterest,  AlertsOfInterest)
mgmt.addConnection(contains,     AlertsCollection,  alert)

// Info
mgmt.printSchema()

mgmt.commit()
