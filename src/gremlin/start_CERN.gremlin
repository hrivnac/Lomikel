import groovy.sql.Sql
//:record start MyGremlin.log
:remote connect tinkerpop.server conf/CERN.yaml session
:remote config timeout 100000
:remote console
  
// -----------------------------------------------------------------------------

class Lomikel {

  def static init() {
    println "class Lomikel initialised"
    }

  def static hi() {
    return "Hello World from Lomikel console !"
    }
        
  // w = g.addV().property('lbl', 'datalink').property('technology', 'Phoenix').property('url', 'jdbc:phoenix:ithdp2101.cern.ch:2181' ).property('query', "select * from AEI.CANONICAL_0 where project = 'mc16_13TeV'").next()
  // w = g.addV().property('lbl', 'datalink').property('technology', 'Graph'  ).property('url', 'hbase:188.184.87.217:8182:janusgraph').property('query', "g.V().limit(1)").next()
  def static getDataLink(v) {
    switch (v.values('technology').next()) {
      case 'HBase':
        return 'HBase'
        break
      case 'Graph':
        def (backend, hostname, port, table) = v.values('url').next().split(':') // hbase:188.184.87.217:8182:janusgraph
        def graph = JanusGraphFactory.build().
                                      set("storage.backend",     backend).
                                      set("storage.hostname",    hostname).
                                      set("storage.port",        port).
                                      set("storage.hbase.table", table).
                                      open()
        def g = graph.traversal()
        return Eval.me('g', g, v.values('query').next())
        break
      case 'Phoenix':
        return Sql.newInstance(v.values('url').next(), 'org.apache.phoenix.jdbc.PhoenixDriver').
                   rows(v.values('query').next())
        break
      default:
        return 'unknown DataLink ' + v
        }
      }
  
  }
  
// -----------------------------------------------------------------------------

Lomikel.init()
