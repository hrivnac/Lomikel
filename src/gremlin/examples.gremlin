// Simple commands
// ===============

// show first 10 vertexes
g.V().limit(10)

// get first dataset
g.V().hasLabel('dataset').next()
// get first 2 datasets
g.V().hasLabel('dataset').next(2)
// show first or last 10 datasets
g.V().hasLabel('dataset').limit(10)
g.V().hasLabel('dataset').range(0, 10)
g.V().hasLabel('dataset').tail(10)
// show all, but first 10 datasets
g.V().hasLabel('dataset').range(10, -1)
g.V().hasLabel('dataset').skip(10)
// get first 10 datasets as list or set
g.V().hasLabel('dataset').limit(10).toList()
g.V().hasLabel('dataset').limit(10).toSet()
// also: repeat(), timelimit(), until()

// show their properties
g.V().hasLabel('dataset').limit(10).values()

// show some of their properties
g.V().hasLabel('dataset').limit(10).values('prodStep')

// convert results to List or Set
g.V().hasLabel('dataset').limit(10).values('prodStep').toList()
g.V().hasLabel('dataset').limit(10).values('prodStep').toSet()

// remove duplicated values and order results
g.V().hasLabel('dataset').limit(10).values('prodStep').dedup().order()

// BulkSet has more information
bs = g.V().hasLabel('dataset').limit(10).values('prodStep').toBulkSet()
bs.size()
bs.uniqueSize()
bs.asBulk()

// store results into existing variable
x = []
y = [] as Set
g.V().hasLabel('dataset').limit(10).values('prodStep').fill(x)
g.V().hasLabel('dataset').limit(10).values('prodStep').fill(y)

// show their properties as map
g.V().hasLabel('dataset').limit(10).valueMap().unfold()

// show label too
g.V().hasLabel('dataset').limit(10).valueMap(true).unfold()

// show some properties
g.V().hasLabel('dataset').limit(10).valueMap('name', 'imported')
g.V().hasLabel('dataset').limit(10).valueMap().select('name', 'imported')

// test if they have a property
g.V().hasLabel('dataset').limit(10).has('prodStep')
g.V().hasLabel('dataset').limit(10).hasNot('prodStep')

// put results into a variable (one or three results)
a = g.V().hasLabel('dataset').limit(10).valueMap().next()
b = g.V().hasLabel('dataset').limit(10).valueMap().next(3)
println b['name'][0]

// show statistics of values
g.V().hasLabel('dataset').limit(10).groupCount().by('prodStep')
g.V().label().groupCount()
g.V().groupCount().by(label)

// show mean, max, min number of events in a run datasets
g.V().has('run', 'number', 358031).out().values('nevents').mean()
g.V().has('run', 'number', 358031).out().values('nevents').max()
g.V().has('run', 'number', 358031).out().values('nevents').min()

// show datasets with more events or number of events in an interval
// see also is(), inside(), outside(), within(), without(), between()
g.V().has('run', 'number', 358031).out().has('nevents', gt(7180136)).values('name', 'nevents')
g.V().has('run', 'number', 358031).out().has('nevents', inside(7180136, 90026772)).values('name', 'nevents')

// show non-AOD datasets of a run
g.V().has('run', 'number', 358031).out().has('dataType', neq('AOD')).values('name')

// test several attributes with 'and', 'or' or 'not'
g.V().hasLabel('dataset').and(has('dataType', 'AOD'), has('prodStep', 'merge'))
g.V().hasLabel('dataset').has('dataType', 'AOD').and().has('prodStep', 'merge')
g.V().not(hasLabel('dataset')).count()
g.V().has(label, neq('dataset')).count()

// formatted valueMap
...valueMap().toList().each{l ->  l.each {k,v -> println "${k}\t${v}"};};null

// Show random datasets
g.V().hasLabel('dataset').coin(0.01)

// More complex navigation
// =======================

// show duplicated verteces
g.V().has('lbl', 'alert').group().by('rowkey').unfold().filter(select(values).count(local).is(gt(1))).select(keys)

// show how many dataset each run has (relation: run -fills-> dataset)
g.V().hasLabel('run').group().by('number').by(out().hasLabel('dataset').count()).unfold()
g.V().hasLabel('run').group().by('number').by(outE().hasLabel('fills').count()).unfold()
g.V().hasLabel('run').group().by('number').by(out('fills').count()).unfold()
g.V().hasLabel('run').group().by('number').by(outE('fills').count()).unfold()

// show overlapping datasets
g.V().hasLabel('dataset').out('overlap').limit(10).path().by('name')

// prefix search
g.V().has('lbl', 'alert').has('rowkey', textContainsPrefix('ZTF19'))

// is there an overlap bewtween two datasets ?
g.V().has('dataset', 'name', 'data18_13TeV.00358031.physics_Main.deriv.DAOD_HIGG2D1.f961_m2015_p3597').out('overlap').has('dataset', 'name', 'data18_13TeV.00358031.physics_Main.deriv.DAOD_HIGG1D1.f961_m2015_p3583').hasNext()

// all labels
g.V().groupCount().by(label).unfold().project('Label', 'Count').by(keys).by(values)
g.E().groupCount().by(label).unfold().project('Label', 'Count').by(keys).by(values)

// show subtree
g.V().has('lbl', 'xxx').limit(1).emit().repeat(group('x').by(loops()).by(label().fold().index()).out()).cap('x').unfold()
g.V().has('lbl', 'xxx').limit(1).emit().repeat(group('x').by(loops()).by(values('yyy').fold().index()).out()).cap('x').unfold()

// Searches
// ========

// find vertices with the name "hercules"
g.V().has("name", "hercules")

// find all vertices with an age greater than 50
g.V().has("age", gt(50))
// or find all vertices between 1000 (inclusive) and 5000 (exclusive) years of age and order by ascending age
g.V().has("age", inside(1000, 5000)).order().by("age", asc)
// which returns the same result set as the following query but in reverse order
g.V().has("age", inside(1000, 5000)).order().by("age", desc)

// find all edges where the place is at most 50 kilometers from the given latitude-longitude pair
g.E().has("place", geoWithin(Geoshape.circle(37.97, 23.72, 50)))

// find all edges where reason contains the word "loves"
g.E().has("reason", textContains("loves"))
// or all edges which contain two words (need to chunk into individual words)
g.E().has("reason", textContains("loves")).has("reason", textContains("breezes"))
// or all edges which contain words that start with "lov"
g.E().has("reason", textContainsPrefix("lov"))
// or all edges which contain words that match the regular expression "br[ez]*s" in their entirety
g.E().has("reason", textContainsRegex("br[ez]*s"))
// or all edges which contain words similar to "love"
g.E().has("reason", textContainsFuzzy("love"))

// find all vertices older than a thousand years and named "saturn"
g.V().has("age", gt(1000)).has("name", "saturn")

// Geoshapes
// =========

// lat, lon
Geoshape.point(37.97, 23.72)
// lat, lon, radius in km
Geoshape.circle(37.97, 23.72, 50)
// SW lat, SW lon, NE lat, NE lon
Geoshape.box(37.97, 23.72, 38.97, 24.72)
// WKT
Geoshape.fromWkt("POLYGON ((35.4 48.9, 35.6 48.9, 35.6 49.1, 35.4 49.1, 35.4 48.9))")
// MultiPoint
Geoshape.geoshape(Geoshape.getShapeFactory().multiPoint().pointXY(60.0, 60.0).pointXY(120.0, 60.0).build())
// MultiLine
Geoshape.geoshape(Geoshape.getShapeFactory().multiLineString()
        .add(Geoshape.getShapeFactory().lineString().pointXY(59.0,  60.0).pointXY(61.0,  60.0))
        .add(Geoshape.getShapeFactory().lineString().pointXY(119.0, 60.0).pointXY(121.0, 60.0)).build())
// MultiPolygon
Geoshape.geoshape(Geoshape.getShapeFactory().multiPolygon()
        .add(Geoshape.getShapeFactory().polygon().pointXY(59.0, 59.0)
                                                 .pointXY(61.0, 59.0)
                                                 .pointXY(61.0, 61.0)
                                                 .pointXY(59.0, 61.0)
                                                 .pointXY(59.0, 59.0))
        .add(Geoshape.getShapeFactory().polygon().pointXY(119.0, 59.0)
                                                 .pointXY(121.0, 59.0)
                                                 .pointXY(121.0, 61.0)
                                                 .pointXY(119.0, 61.0)
                                                 .pointXY(119.0, 59.0)).build())
// GeometryCollection
Geoshape.geoshape(Geoshape.getGeometryCollectionBuilder()
        .add(Geoshape.getShapeFactory().pointXY(60.0, 60.0))
        .add(Geoshape.getShapeFactory().lineString().pointXY(119.0, 60.0).pointXY(121.0, 60.0).build())
        .add(Geoshape.getShapeFactory().polygon().pointXY(119.0, 59.0).pointXY(121.0, 59.0).pointXY(121.0, 61.0).pointXY(119.0, 61.0).pointXY(119.0, 59.0)).build())

// search
g.V().has('lbl', 'candidate').has('direction', geoWithin(Geoshape.circle(29, 108, 0.0001*6371.0087714*180/Math.PI)))        
        
// Also
// ====
// local(), coin(), sample()
// order(), order().by(), order().by(shuffle), order().by(decr), order(local), order().by(keys) 
// and(), or()

// Tricks
// ======

// prevent auto-iteration (in console)
g.V();null

// supress output (disable automatic iteration in console)
g.V().limit(10);[]

// show result object methods
g.V().hasLabel('dataset').limit(1).next().getClass().getMethods()

// read script from file
evaluate(new File("..."))

// profile a query
...profile()

// explain a query
...explain()

// Management
// ==========

// disable index
mgmt = graph.openManagement()
x=mgmt.getGraphIndex('x')
mgmt.updateIndex(x, SchemaAction.DISABLE_INDEX).get()
mgmt.commit()

// enable index
mgmt = graph.openManagement()
ManagementSystem.awaitGraphIndexStatus(graph, 'x').status(SchemaStatus.ENABLED).timeout(10, ChronoUnit.MINUTES).call()
mgmt.commit()

// show indexes
mgmt.getGraphIndexes(Vertex.class)
mgmt.printIndexes()

// get open transactions
graph.getOpenTransactions()

// close open transaction
graph.getOpenTransactions().getAt(0).rollback()

// get stale instances
mgmt.getOpenInstances()

// close stale instances
mgmt.forceCloseInstance('xyz') 

// print schema
mgmt.printSchema()

// drop schema
schema.clear()

// drop index
schema.vertexLabel('v').index('i').remove()

// drop graph
:remote config alias reset
system.graph('food').truncate()
system.graph('food').drop()

// clean everything
graph.close()
org.janusgraph.core.JanusGraphFactory.drop(graph)


// IO
// ==

// GraphML

graph.io(IoCore.graphml()).writeGraph('x.graphml')

g.V().has('lbl', 'ATLAS').outE().subgraph('x').cap('x').next().io(IoCore.graphml()).writeGraph('x.graphml')

graph.io(IoCore.graphml()).readGraph('x.graphml')

// GraphSON

graph.io(IoCore.graphson()).writeGraph('x.json')   

file = new File('x.json')
query = g.V().valueMap().toList()
x = GraphSONMapper.build().
                   typeInfo(org.apache.tinkerpop.gremlin.structure.io.graphson.TypeInfo.PARTIAL_TYPES).
                   addCustomModule(org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONXModuleV2d0.build().create(false)).
                   version(GraphSONVersion.V3_0).
                   addRegistry(JanusGraphIoRegistry.instance()).
                   create().
                   createMapper().
                   writeValueAsString(query)
file.write(x)

graph.io(graphson()).readGraph('x.json');

// Gryo

graph.io(IoCore.gryo()).writeGraph('x.kryo')

graph.io(IoCore.gryo()).readGraph('x.kryo')

// Console
// =======

// clear cli mess
:clear

// show commands history
:history

// Load a file
:load x.gremlin

// Hints
// =====
// for several (nested) searches, search first on more selective field 

// Scripts
// =======

// Load data from file
batchSize = 10000
new File(filename).eachLine {
  line, count ->
    if (line != null && line.trim().length() > 0) {
      field = line.split(",");
      t_v1 = g.V().has('u',field[0]); v1 = t_v1.hasNext() ? t_v1.next() : graph.addVertex('u', field[0]).next();
      t_v2 = g.V().has('u',field[1]); v2 = t_v2.hasNext() ? t_v2.next() : graph.addVertex('u', field[1]).next();
      g.V(v1).as('x').V(v2).as('y').addE(field[2]).from('x').to('y').property('v', p[3]).property('w', p[4]).iterate();
      if (count % batchSize == 0) {
        graph.tx().commit()
        println count
        }
      }
  }
graph.tx().commit();

// More
// ====

https://kelvinlawrence.net/book/Gremlin-Graph-Guide.html
https://gist.github.com/jeremysears/3ceada192827983837ee1551c50688c7
