import com.Lomikel.HBaser.HBaseClient;
import com.Lomikel.HBaser.SQLHBaseClient;
import com.Lomikel.HBaser.HBaseESClient;
import com.Lomikel.HBaser.AsynchHBaseClient;
import com.Lomikel.ElasticSearcher.ESClient;

// -----------------------------------------------------------------------------

// check HBaseClient

// Open HBase database (ip, port)
HBaseClient client = new HBaseClient("hbase-1.lal.in2p3.fr", 2183);
// Connect to table with defined schema
client.connect("ztf", "schema_2.2_2.0.0");
// Set maximum number of results
client.setLimit(5);

// Get the loaded schema as family:column=type,...
result = client.schema();
print(result);

// Get two columns for two known alerts (specified by their keys) 
// Result: Map<String, Map<String, String>>
results = client.scan("ZTF17aaaaaal_2458860.665162,ZTF17aaaaaal_2458899.6333102",
                      null,
                      "i:candid,b:cutoutScience_stampData",
                      0,
                      false,
                      false);
print(client.results2String(results)); 

// Get binary cell received in previous command
print(client.repository().get("binary:ZTF17aaaaaal_2458860.665162:cutoutScience_stampData"));

// Get all alerts with key containing 'xyd' or starting with 'ZTF19aaaiw'
// Available comparators: exact, prefix (default), substring, regex
results = client.scan(null,
                      "key:key:xyd:substring,key:key:ZTF19aaaiw:prefix",
                      "i:candid",
                      0,
                      true,
                      true);
print(client.results2String(results)); 

// Get all alerts with column match
// It only works for string columns
// May use Evaluator for numerical columns
// Available comparators: exact, prefix, substring (default), regex
results = client.scan(null,
                      "d:cdsxmatch:YSO:exact",
                      "i:candid,d:cdsxmatch",
                      0,
                      true,
                      true);
print(client.results2String(results)); 

// Get timeline dependece of i:dec
results = client.timeline("i:dec", null);
print(results); 

// Get all recent (last 100000 minutes) objectIds
results = client.latests("i:objectId",
                         null,
                         100000,
                         true);
print(results); 

// Apply predefined function to filter resultsimport com.Lomikel.HBaser.AsynchHBaseClient;

client.setEvaluation("isWithinGeoLimits(80, 85, -4.0, 0.0)", "ra,dec");
results = client.scan(null,
                      null,
                      null,
                      0,
                      false,
                      false);
print(client.results2String(results)); 

// Apply formula to filter results
client.setEvaluation("dec < 55");
results = client.scan(null,
                      null,
                      null,
                      0,
                      false,
                      false);import com.Lomikel.HBaser.AsynchHBaseClient;

print(client.results2String(results)); 

client.close();

// -----------------------------------------------------------------------------

// Get all schemas
HBaseClient client = new HBaseClient("hbase-1.lal.in2p3.fr", 2183);
client.connect("ztf", null);
results = client.scan(null,
                      "key:key:schema:prefix",
                      null,
                      0,
                      0,
                      false,
                      false);
print(client.results2String(results)); 
client.close();

// -----------------------------------------------------------------------------

// create HBase client put method

HBaseClient client = new HBaseClient("hbase-1.lal.in2p3.fr", 2183);

client.create("test1", new String[]{"i", "b", "d", "a"});

client.connect("test1", null);
client.put("schema_a", new String[]{"i:one:string", "i:two:float", "i:three:double", "i:four:short", "i:five:integer", "i:six:long", "b:seven:fits/image", "b:eight:fits", "b:nine:binary"});

client.connect("test1", "schema_a");
client.put("row_a_1", new String[]{"i:one:abcdef", "i:two:1.2345", "i:three:1.23456789", "i:four:5", "i:five:555", "i:six:555555555"});
results = client.scan("row_a_1",
                      null,
                      "*",
                      0,
                      false,
                      false);
print(client.results2String(results)); 

// -----------------------------------------------------------------------------

HBaseSQLClient client = new HBaseSQLClient("hbase-1.lal.in2p3.fr", 2183);
client.connect("ztf", "schema_3.1_5.2.0");
sql = client.sqlViewCreationCommand();

// Create Phoenix view of the HBase table
//   should be executed in sqlline.py
client.sqlViewCreationCommand();
// Use SQL query to scan it
// BUG: fails
results = client.scan("select ROWKEY,\"candid\",\"ra\",\"xpos\" from \"ztf\" limit 1", true);
print(results); 

// Create Phoenix table for the HBase table
//   a table per schema 
//   should be executed in sqlline.py
client.sqlTableCreationCommand();
// Replicate rows into Phoenix table
// BUG: fails
client.scan2SQL(null,
               "key:key:ZTF:prefix",
               "*",
               0,
               0,
               true,
               true,
               "ZTF_SCHEMA_3__1_5__2__0");

client.close();


// -----------------------------------------------------------------------------

// check AsynchHBaseClient

AsynchHBaseClient client = new AsynchHBaseClient("hbase-1.lal.in2p3.fr", 2183);
client.connect("ztf", "schema_3.1_5.6.2");
client.setLimit(10000);
client.startScan(null,
            null,
            "i:ra,i:dec",
            0,
            0,
            true,
            true);
while (client.scanning() || client.size() > 0) {
  if (client.size() > 0) {
    print(client.size() + ":\t" + client.poll());
    }
  }
client.stop();

client.setLimit(1000);
client.setLoopWait(500);
client.scan(null,
            null,
            "i:ra,i:dec",
            0,
            0,
            true,
            true,
            10);

client.close();

// -----------------------------------------------------------------------------

// test ES client and connection to ES client from HBaseClient

ESClient esclient = new ESClient("http://134.158.74.85:20200");

esclient.createIndex("testradec", "geo_point");
esclient.putGeoPoint("testradec", "point 1", 45.12, -79.34);
esclient.searchGeoPoint("testradec", 45.12, -79.34, 500);

HBaseESClient client = new HBaseESClient("hbase-1.lal.in2p3.fr", 2183);

client.connect("ztf", "schema_2.2_2.0.0");
client.setLimit(10);
client.connectElasticSearch("http://134.158.74.85:20200", "testradec");
client.scan(null,
            "key:key:ZTF17aaaaaa:prefix,d:cdsxmatch:YSO:exact",
            "i:candid,i:ra,i:dec",
            0,
            true,
            true);

// -----------------------------------------------------------------------------
